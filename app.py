import streamlit as st
import requests

# Token desde secrets
token = st.secrets["HUGGINGFACEHUB_API_TOKEN"]

# Modelo compatible y funcional v√≠a API
modelo = "PlanTL-GOB-ES/gpt2-base-bne"
API_URL = f"https://api-inference.huggingface.co/models/{modelo}"
headers = {"Authorization": f"Bearer {token}"}

def generar_respuesta(prompt):
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": 100,
            "temperature": 0.7,
            "top_p": 0.95
        }
    }
    response = requests.post(API_URL, headers=headers, json=payload)
    try:
        resultado = response.json()
        if isinstance(resultado, list) and "generated_text" in resultado[0]:
            return resultado[0]["generated_text"].split("Psic√≥logo:")[-1].strip()
        return "Lo siento, no pude generar una respuesta. ¬øPuedes intentarlo de nuevo?"
    except Exception as e:
        return f"‚ö†Ô∏è Error en la respuesta de la API: {str(e)}"

# Interfaz
st.set_page_config(page_title="Chat psicol√≥gico", page_icon="üß†")
st.title("üß† Chat emocional con IA en Espa√±ol")
st.write("Cu√©ntame c√≥mo te sientes. Estoy aqu√≠ para ayudarte emocionalmente.")

if "historial" not in st.session_state:
    st.session_state.historial = []

for mensaje in st.session_state.historial:
    st.markdown(mensaje, unsafe_allow_html=True)

with st.form("formulario"):
    entrada = st.text_input("T√∫:", key="entrada")
    enviar = st.form_submit_button("Enviar")

if enviar and entrada:
    st.session_state.historial.append(f"<div style='color:blue'><b>T√∫:</b> {entrada}</div>")

    prompt = f"""
Act√∫a como un psic√≥logo emp√°tico que responde en espa√±ol.
Si el usuario est√° triste, responde con comprensi√≥n. Si est√° feliz, al√©grate con √©l.

Usuario: {entrada}
Psic√≥logo:"""

    respuesta = generar_respuesta(prompt)
    st.session_state.historial.append(f"<div style='color:green'><b>Psicobot:</b> {respuesta}</div>")
